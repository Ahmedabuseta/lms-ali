generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id          String  @id @default(cuid())
  //createdById String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean @default(false)

  attachments Attachment[]
  category    Category?    @relation(fields: [categoryId], references: [id])
  categoryId  String?
  chapters    Chapter[]
  purchases   Purchase[]
  // flashcards  Flashcard[]
  exams       Exam[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PracticeQuestion PracticeQuestion[]
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id String @id @default(cuid())

  name String
  url  String

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(cuid())
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String
  muxData      MuxData?
  userProgress UserProgress[]
  flashcards   Flashcard[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Exam Exam[]

  PracticeQuestion PracticeQuestion[]
}

model MuxData {
  id         String  @id @default(cuid())
  assetId    String
  playbackId String?

  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String  @unique
}

model UserProgress {
  id     String @id @default(cuid())
  userId String

  chapter     Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId   String
  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
}

model Purchase {
  id     String @id @default(cuid())
  userId String

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

model StripeCustomer {
  id String @id @default(cuid())

  userid           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Flashcard {
  id        String   @id @default(uuid())
  question  String   @db.Text
  answer    String   @db.Text
  chapterId String
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  
  // courses Course[]
  
  @@index([chapterId])
}

model Exam {
  id          String    @id @default(cuid())
  title       String
  description String?
  timeLimit   Int?      // Time limit in minutes, null means no time limit
  isPublished Boolean   @default(false)
  
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  chapter     Chapter?  @relation(fields: [chapterId], references: [id], onDelete: SetNull)
  chapterId   String?
  
  questions   Question[]
  attempts    ExamAttempt[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([courseId])
  @@index([chapterId])
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
}

model Question {
  id          String      @id @default(cuid())
  text        String
  type        QuestionType
  points      Int         @default(1)
  
  exam        Exam        @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId      String
  
  options     Option[]
  attempts    QuestionAttempt[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([examId])
}

model Option {
  id          String    @id @default(cuid())
  text        String
  isCorrect   Boolean   @default(false)
  
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String
  
  attempts    QuestionAttempt[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([questionId])
}

model ExamAttempt {
  id          String    @id @default(cuid())
  userId      String
  
  exam        Exam      @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId      String
  
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  score       Int?
  
  questionAttempts QuestionAttempt[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([examId])
}

model QuestionAttempt {
  id          String    @id @default(cuid())
  
  examAttempt ExamAttempt @relation(fields: [examAttemptId], references: [id], onDelete: Cascade)
  examAttemptId String
  
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String
  
  selectedOption Option? @relation(fields: [selectedOptionId], references: [id], onDelete: SetNull)
  selectedOptionId String?
  
  isCorrect   Boolean?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([examAttemptId])
  @@index([questionId])
  @@index([selectedOptionId])
}

model PracticeQuestion {
  id          String      @id @default(cuid())
  text        String
  type        QuestionType
  difficulty  String?     // Easy, Medium, Hard
  
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  
  chapter     Chapter?    @relation(fields: [chapterId], references: [id], onDelete: SetNull)
  chapterId   String?
  
  options     PracticeOption[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([courseId])
  @@index([chapterId])
}

model PracticeOption {
  id          String    @id @default(cuid())
  text        String
  isCorrect   Boolean   @default(false)
  
  question    PracticeQuestion  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([questionId])
}
